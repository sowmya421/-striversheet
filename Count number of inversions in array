int merge(vector<int>&arr, vector<int>& temp, int left, int mid, int right){
    int i,j,k;
    int count=0;
    i=left;
    j=mid;
    k=left;
    while((i<= mid-1) && (j<=right)){
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }
        else{
            temp[k++]=arr[j++];
            count=count+(mid-i);
        }
    }
    
    while(i <= mid-1){
        temp[k++]=arr[i++];
    }
    while(j<=right){
        temp[k++]=arr[j++];
    }
    for(i=left; i<=right; i++){
        arr[i]=temp[i];
    }
    return count;
    
}
int mergesort(vector<int>& arr, vector<int>& temp, int left, int right){
    int mid, count=0;
    if(right>left){
        mid=(left+right)/2;
        count+=mergesort(arr,temp,left,mid);
        count+=mergesort(arr,temp,mid+1,right);
        
        count+=merge(arr,temp,left,mid+1,right);
    }
    return count;
}
int Solution::countInversions(vector<int> &A) {
    int n=A.size();
    vector<int>temp;
    int ans=mergesort(A, temp, 0, n-1);
    return ans;
}
