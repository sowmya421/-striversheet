/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int rootIdx = 0;
        return build(preorder, inorder, rootIdx, 0, inorder.size()-1);
    }
    
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int& rootIdx, int left, int right) {
        if (left > right) return NULL;
        int pivot = left;  // find the root from inorder
        while(inorder[pivot] != preorder[rootIdx]) pivot++;
        
        rootIdx++;
        TreeNode* newNode = new TreeNode(inorder[pivot]);
        newNode->left = build(preorder, inorder, rootIdx, left, pivot-1);
        newNode->right = build(preorder, inorder, rootIdx, pivot+1, right);
        return newNode;
    }
};

// class Solution {
// public:
//     TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
//         map<int,int>m;
//         for(int i=0; i<inorder.size(); i++){
//             m[inorder[i]]=i;
//         }
//         TreeNode* root= build(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1, m);
//         return root;
//     }
//     TreeNode* build(vector<int>& preorder, int prestart, int preend, vector<int>& inorder,
//                        int instart, int inend, map<int,int>m){
//         if(prestart>preend || instart>inend) return NULL;
//         TreeNode* root=new TreeNode(preorder[prestart]);
//         int inroot=m[root->val];
//         int numleft=inroot-instart;
//         root->left= build(preorder, prestart+1, prestart+numleft, inorder, instart, inroot-1,m);
//         root->right= build(preorder, prestart+numleft+1, preend, inorder, inroot+1, inend, m);
//         return root;
//     }
// };
